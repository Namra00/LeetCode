class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
#         def dfs(cur, i, d = {}):
#             if i < len(nums) and (i, cur) not in d: 
#                 d[(i, cur)] = dfs(cur + nums[i], i + 1) + dfs(cur - nums[i], i + 1)
#             return d.get((i, cur), int(cur == S))
        
#         return dfs(0, 0)
    
    
    
        if not nums or sum(nums)<S: return 0
        dic = {0:1}
        for i in range(len(nums)):
            temp_dic = collections.defaultdict(int)
            for k in dic:
                temp_dic[k+nums[i]] += dic[k]
                temp_dic[k-nums[i]] += dic[k]
            dic = temp_dic
        return dic[S]
    